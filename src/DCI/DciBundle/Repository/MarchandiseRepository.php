<?php

namespace DCI\DciBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * MarchandiseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MarchandiseRepository extends \Doctrine\ORM\EntityRepository {
    
     public function allMarchandise($page, $nbrAffichPage) {
        $qb = $this->createQueryBuilder('Marchandise')
                ->select('Marchandise')
                ->getQuery();
        $qb
                // On définit l'annonce à partir de laquelle commencer la liste
                ->setFirstResult(($page - 1) * $nbrAffichPage)
                // Ainsi que le nombre d'annonce à afficher sur une page
                ->setMaxResults($nbrAffichPage);

        return new Paginator($qb, true);
    }
    
       public function marchtDunProduit($idproSer) {
        $qb = $this->createQueryBuilder('march')
                ->select('march')
                ->leftJoin('march.produitService', 'proSer')
                ->andWhere('proSer.id =:id')
                ->setParameter('id', $idproSer);

        return $qb->getQuery()->getResult();
    }
    
    public function marchandiseDunProduit($page, $nbrAffichPage, $id) {
        $qb = $this->createQueryBuilder('march')
                ->select('march')
                ->leftJoin('march.sousCategorieEntite', 'sousCategorieEntite')
                ->andWhere('sousCategorieEntite.id =:id')
                ->setParameter('id', $id)
                ->getQuery();
        $qb
           // On définit l'annonce à partir de laquelle commencer la liste
           ->setFirstResult(($page-1) * $nbrAffichPage)
           // Ainsi que le nombre d'annonce à afficher sur une page
           ->setMaxResults($nbrAffichPage) ;
            
            return new Paginator($qb, true);
    }
    
    public function getNumeroReference() {
        $date = new \DateTime;
        $debutNum = $date->format('Ym');
        $qb = $this->createQueryBuilder('marchandise')
                ->add('select', '(marchandise.reference)as num');
        $qb->where($qb->expr()->like('marchandise.reference', ':numero'))
                ->setParameter('numero', '%' . $debutNum . '%')
                ->orderBy('marchandise.reference', 'DESC')
                ->setMaxResults(1);

        $num = $qb->getQuery()
                ->getResult();
        if (count($num) >> 0) {
            return $num[0]['num'] + 1;
        } else {
            return $debutNum . "01";
        }
    }
    
}
